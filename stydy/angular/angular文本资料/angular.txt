
依赖注入	
@Component({
    selector: 'my-app',
    templateUrl: 'app/templates/app.html',
    providers: [
        UserService
    ]
})
@Component({
    selector: 'my-app',
    //template: '<h1>My First Angular2 Travel</h1>',
    templateUrl: 'app/templates/app.html',
    providers: [
        Logger, 
        UserService
    ]
})
我们上面所说的那种提供服务的方式其实是最简单的一种方式,
接下来我们讨论注册不同的服务提供商的方法;
首先第一种就是我们上面所说的那种了,其实它是一种简写的方式;详细的方式应该是这样的:

[{ provide: Logger, useClass: Logger }]
provice只是一个key他的值只是一个名字，后面是实例化的对象，名字可以不同
providers: [
        [LoggerHelper, {provide: Logger, useClass: BetterLogger}], // 带有依赖的注册商
        UserService
    ]
[{ provide: BetterLogger, useClass: BetterLogger}],
[{ provide: Logger, useExisting: BetterLogger}]    //只创建一次，否则创建二次
值提供商:
我们可以使用更简便的方法来注册一个提供商,那就是使用值,
所谓的值可以是任何一种有效的TypeScript的基本的数据类型.
我们来首先使用一个对象吧.首先我们新创建一个文件logger.value.ts,
路径是app/values/logger.value.ts;我们写一个基本的loggerValue对象如下:

let loggerValue = {
    logs: ['Hello', 'World'],
    log: (msg) => {
        console.warn('From values: ' + msg);
    },
    hello: () => {
        console.log('Just say hello!');
    }
};

export {loggerValue};
那我们如何注册这个提供商呢?我们使用useValue选项来注册我们这种提供商;如下所示:

// ...
providers: [
        [LoggerHelper, {provide: BetterLogger, useClass: BetterLogger}],
        {provide: Logger, useValue: loggerValue},
        //{provide: Logger, useValue: loggerValue1}, // 我们使用了useValue选项
        UserService
    ]
// ...    
还要记住把loggerValue导入进来;然后我们稍微修改一下user.service.ts的代码:

// ...
getUsers() {
        this.logger.log('get users');
        //noinspection TypeScriptUnresolvedFunction
        this.logger.hello();
        return Users;
    }
// ...
为了方便我们暂时直接在app.component.ts中书写我们的配置:

// ...
let UserService2Provider = (logger: Logger, authorize: Authorize) => {
    return new UserService2(logger, authorize.getIsAuthorized());
};

	
HeroService.getHeroes() 必须具有某种形式的异步函数签名。
它可以使用回调函数，可以返回 Promise（承诺），也可以返回 Observable（可观察对象）。
import { Observable, of } from 'rxjs';
getHeroes(): Observable<Hero[]> {
  return of(HEROES);
}
of(HEROES) 会返回一个 Observable<Hero[]>，它会发出单个值，这个值就是这些模拟英雄的数组。
getHeroes(): void {
  this.heroService.getHeroes()
      .subscribe(heroes => this.heroes = heroes);
}
Observable.subscribe() 是关键的差异点。
上一个版本把英雄的数组赋值给了该组件的 heroes 属性。 这种赋值是同步的，
这里包含的假设是服务器能立即返回英雄数组或者浏览器能在等待服务器响应时冻结界面。
当 HeroService 真的向远端服务器发起请求时，这种方式就行不通了。

新的版本等待 Observable 发出这个英雄数组，这可能立即发生，也可能会在几分钟之后。 
然后，subscribe 函数把这个英雄数组传给这个回调函数，
该函数把英雄数组赋值给组件的 heroes 属性。
使用这种异步方式，当 HeroService 从远端服务器获取英雄数据时，就可以工作了。
  <button class="clear"
          (click)="messageService.clear()">clear</button>
		  constructor(public messageService: MessageService) {}
这个 messageService 属性必须是公共属性，因为你将会在模板中绑定到它。

路由

ng generate module app-routing --flat --module=app //创建一个模块
--flat 把这个文件放进了 src/app 中，而不是单独的目录中。
--module=app 告诉 CLI 把它注册到 AppModule 的 imports 数组中。
import { NgModule }             from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

@NgModule({
  exports: [ RouterModule ]
})
export class AppRoutingModule {}
导出 RouterModule 让路由器的相关指令可以在 AppModule 中的组件中使用。
const routes: Routes = [
  { path: 'heroes', component: HeroesComponent }
];
@NgModule({
  exports: [ RouterModule ]
  imports: [ RouterModule.forRoot(routes) ],
})
添加路由出口 （RouterOutlet）
打开 AppComponent 的模板，把 <app-heroes> 元素替换为 <router-outlet> 元素。

src/app/app.component.html (router-outlet)

<h1>{{title}}</h1>
<router-outlet></router-outlet>
<app-messages></app-messages>
之所以移除 <app-heroes>，是因为只有当用户导航到这里时，才需要显示 HeroesComponent。

<router-outlet> 会告诉路由器要在哪里显示路由到的视图。
 <a routerLink="/heroes">Heroes</a>
 
 添加默认路由
当应用启动时，浏览器的地址栏指向了网站的根路径。 它没有匹配到任何现存路由，因此路由器也不会导航到任何地方。 <router-outlet> 下方是空白的。

要让应用自动导航到这个仪表盘，请把下列路由添加到 AppRoutingModule.Routes 数组中。


{ path: '', redirectTo: '/dashboard', pathMatch: 'full' },
这个路由会把一个与空路径“完全匹配”的 URL 重定向到路径为 '/dashboard' 的路由。

浏览器刷新之后，路由器加载了 DashboardComponent，并且浏览器的地址栏会显示出 /dashboard 这个 URL。
{ path: 'detail/:id', component: HeroDetailComponent },
path 中的冒号（:）表示 :id 是一个占位符，它表示某个特定英雄的 id。

此刻，应用中的所有路由都就绪了。

src/app/app-routing.module.ts (all routes)

const routes: Routes = [
  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },
  { path: 'dashboard', component: DashboardComponent },
  { path: 'detail/:id', component: HeroDetailComponent },
  { path: 'heroes', component: HeroesComponent }
];

<a *ngFor="let hero of heroes" class="col-1-4"
    routerLink="/detail/{{hero.id}}">
HeroDetailComponent 需要从一种新的途径获取要显示的英雄。

获取创建本组件的路由，

从这个路由中提取出 id

通过 HeroService 从服务器上获取具有这个 id 的英雄数据。

先添加下列导入语句：

src/app/hero-detail/hero-detail.component.ts
import { ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';

import { HeroService }  from '../hero.service';
然后把 ActivatedRoute、HeroService 和 Location 服务注入到构造函数中，将它们的值保存到私有变量里：

constructor(
  private route: ActivatedRoute,
  private heroService: HeroService,
  private location: Location
) {}
ActivatedRoute 保存着到这个 HeroDetailComponent 实例的路由信息。 
这个组件对从 URL 中提取的路由参数感兴趣。 其中的 id 参数就是要现实的英雄的 id。

HeroService 从远端服务器获取英雄数据，本组件将使用它来获取要显示的英雄。

location 是一个 Angular 的服务，用来与浏览器打交道。 稍后，你就会使用它来导航回上一个视图。
从路由参数中提取 id
在 ngOnInit() 生命周期钩子 中调用 getHero()，代码如下：

ngOnInit(): void {
  this.getHero();
}

getHero(): void {
  const id = +this.route.snapshot.paramMap.get('id');
  this.heroService.getHero(id)
    .subscribe(hero => this.hero = hero);
}
route.snapshot 是一个路由信息的静态快照，抓取自组件刚刚创建完毕之后。

paramMap 是一个从 URL 中提取的路由参数值的字典。 "id" 对应的值就是要获取的英雄的 id。

路由参数总会是字符串。 JavaScript 的 (+) 操作符会把字符串转换成数字，
英雄的 id 就是数字类型。

刷新浏览器，应用挂了。出现一个编译错误，
因为 HeroService 没有一个名叫 getHero() 的方法。 这就添加它。
goBack(): void {
  this.location.back();
}

启用 HTTP 服务

HttpClient 是 Angular 通过 HTTP 与远程服务器通讯的机制。
要让 HttpClient 在应用中随处可用，请
打开根模块 AppModule，
从 @angular/common/http 中导入 HttpClientModule 符号，
把它加入 @NgModule.imports 数组。
import { HttpClient, HttpHeaders } from '@angular/common/http';
getHeroes (): Observable<Hero[]> {
  return this.http.get<Hero[]>(this.heroesUrl)
}
import { catchError, map, tap } from 'rxjs/operators';
getHeroes (): Observable<Hero[]> {
  return this.http.get<Hero[]>(this.heroesUrl)
    .pipe(
      catchError(this.handleError('getHeroes', []))
    );
}
private handleError<T> (operation = 'operation', result?: T) {
  return (error: any): Observable<T> => {
 
    // TODO: send the error to remote logging infrastructure
    console.error(error); // log to console instead
 
    // TODO: better job of transforming error for user consumption
    this.log(`${operation} failed: ${error.message}`);
 
    // Let the app keep running by returning an empty result.
    return of(result as T);
  };
}
窥探 Observable

HeroService 的方法将会窥探 Observable 的数据流，并通过 log() 函数往页面底部发送一条消息。
它们可以使用 RxJS 的 tap 操作符来实现，该操作符会查看 Observable 中的值，
使用那些值做一些事情，并且把它们传出来。 这种 tap 回调不会改变这些值本身。
下面是 getHeroes 的最终版本，它使用 tap 来记录各种操作。
/** GET heroes from the server */
getHeroes (): Observable<Hero[]> {
  return this.http.get<Hero[]>(this.heroesUrl)
    .pipe(
      tap(heroes => this.log('fetched heroes')),
      catchError(this.handleError('getHeroes', []))
    );
}
修改
/** PUT: update the hero on the server */
updateHero (hero: Hero): Observable<any> {
  return this.http.put(this.heroesUrl, hero, httpOptions).pipe(
    tap(_ => this.log(`updated hero id=${hero.id}`)),
    catchError(this.handleError<any>('updateHero'))
  );
}
HttpClient.put() 方法接受三个参数
URL 地址
要修改的数据（这里就是修改后的英雄）
选项
URL 没变。英雄 Web API 通过英雄对象的 id 就可以知道要修改哪个英雄。
英雄 Web API 期待在保存时的请求中有一个特殊的头。 
这个头是在 HeroService 的 httpOptions 常量中定义的。
const httpOptions = {
  headers: new HttpHeaders({ 'Content-Type': 'application/json' })
};
 <button (click)="add(heroName.value); heroName.value=''">
 addHero (hero: Hero): Observable<Hero> {
  return this.http.post<Hero>(this.heroesUrl, hero, httpOptions).pipe(
    tap((hero: Hero) => this.log(`added hero w/ id=${hero.id}`)),
    catchError(this.handleError<Hero>('addHero'))
  );
}
HeroService.addHero() 和 updateHero 有两点不同。

它调用 HttpClient.post() 而不是 put()。
它期待服务器为这个新的英雄生成一个 id，然后把它通过 Observable<Hero> 返回给调用者。
刷新浏览器，并添加一些英雄。
把 delete() 处理器添加到组件中。
src/app/heroes/heroes.component.ts (delete)
content_copy
delete(hero: Hero): void {
  this.heroes = this.heroes.filter(h => h !== hero);
  this.heroService.deleteHero(hero).subscribe();
}
虽然这个组件把删除英雄的逻辑委托给了 HeroService，但扔保留了更新它自己的英雄列表的职责。
 组件的 delete() 方法会在 HeroService 对服务器的操作成功之前，先从列表中移除要删除的英雄。
组件与 heroService.delete() 返回的 Observable 还完全没有关联。必须订阅它。
如果你忘了调用 subscribe()，本服务将不会把这个删除请求发送给服务器。 作为一条通用的规则，
Observable 在有人订阅之前什么都不会做。
你可以暂时删除 subscribe() 来确认这一点。点击“Dashboard”，然后点击“Heroes”，
就又看到完整的英雄列表了。
添加 HeroService.deleteHero()
把 deleteHero() 方法添加到 HeroService 中，代码如下。
src/app/hero.service.ts (delete)
/** DELETE: delete the hero from the server */
deleteHero (hero: Hero | number): Observable<Hero> {
  const id = typeof hero === 'number' ? hero : hero.id;
  const url = `${this.heroesUrl}/${id}`;

  return this.http.delete<Hero>(url, httpOptions).pipe(
    tap(_ => this.log(`deleted hero id=${id}`)),
    catchError(this.handleError<Hero>('deleteHero'))
  );
}
AsyncPipe
如你所愿，*ngFor 重复渲染出了这些英雄。

仔细看，你会发现 *ngFor 是在一个名叫 heroes$ 的列表上迭代，而不是 heroes。
<li *ngFor="let hero of heroes$ | async" >
$ 是一个命名惯例，用来表明 heroes$ 是一个 Observable，而不是数组。

*ngFor 不能直接使用 Observable。 不过，它后面还有一个管道字符（|），
后面紧跟着一个 async，它表示 Angular 的 AsyncPipe。
AsyncPipe 会自动订阅到 Observable，这样你就不用再在组件类中订阅了。

navigate是Router类的一个方法，主要用来跳转路由。 

函数定义：
navigate(commands: any[], extras?: NavigationExtras) : Promise`<boolean>`1
interface NavigationExtras {
  relativeTo : ActivatedRoute
  queryParams : Params
  fragment : string
  preserveQueryParams : boolean
  preserveFragment : boolean
  skipLocationChange : boolean
  replaceUrl : boolean
}123456789

1.this.router.navigate(['user', 1]); 
 以根路由为起点跳转

2.this.router.navigate(['user', 1],{relativeTo: route});  
默认值为根路由，设置后相对当前路由跳转，route是ActivatedRoute的实例，
使用需要导入ActivatedRoute

3.this.router.navigate(['user', 1],{ queryParams: { id: 1 } }); 
路由中传参数 /user/1?id=1

4.this.router.navigate(['view', 1], { preserveQueryParams: true }); 
默认值为false，设为true，保留之前路由中的查询参数/user?id=1 to /view?id=1

5.this.router.navigate(['user', 1],{ fragment: 'top' }); 
路由中锚点跳转 /user/1#top 

6.this.router.navigate(['/view'], { preserveFragment: true }); 
默认值为false，设为true，保留之前路由中的锚点/user/1#top to /view#top

7.this.router.navigate(['/user',1], { skipLocationChange: true }); 
默认值为false，设为true路由跳转时浏览器中的url会保持不变，但是传入的参数依然有效

8.this.router.navigate(['/user',1], { replaceUrl: true }); 
未设置时默认为true，设置为false路由不会进行跳转

form表单

用户输入
<input (keyup)="onKey($event)">
export class KeyUpComponent_v1 {
  values = '';

  onKey(event: any) { // without type info
    this.values += event.target.value + ' | ';
  }
}
或者，你可以用 event.key 替代 event.target.value，积累各个按键本身，
这样同样的用户输入可以产生：
@Component({
  selector: 'app-loop-back',
  template: `
    <input #box (keyup)="0">
    <p>{{box.value}}</p>
  `
})
export class LoopbackComponent { }
这个模板引用变量名叫 box，在 <input> 元素声明，它引用 <input> 元素本身。
 代码使用 box 获得输入元素的 value 值，

这个模板完全是完全自包含的。并通过插值表达式把它显示在 <p> 标签中。
a | b | c | backspace | backspace | backspace |
它没有绑定到组件，组件也没做任何事情。
template: `
    <input #box (keyup)="onKey(box.value)">
    <p>{{values}}</p>
  `
})
export class KeyUpComponent_v2 {
  values = '';
  onKey(value: string) {
    this.values += value + ' | ';
  }
   <input #box (keyup.enter)="onEnter(box.value)">
    <p>{{value}}</p>
  `
})
export class KeyUpComponent_v3 {
  value = '';
  onEnter(value: string) { this.value = value; }
}
template: `
    <input #box
      (keyup.enter)="update(box.value)"
      (blur)="update(box.value)">

    <p>{{value}}</p>
  `
})
export class KeyUpComponent_v4 {
  value = '';
  update(value: string) { this.value = value; }
  
模板驱动表单
  
import { FormsModule }   from '@angular/forms';
如果某个组件、指令或管道是属于 imports 中所导入的某个模块的，
那就不能再把它再声明到本模块的 declarations 数组中。 如果它是你自己写的，
并且确实属于当前模块，才应该把它声明在 declarations 数组中。
container、form-group、form-control 和 btn 类来自 Twitter Bootstrap。
这些类纯粹是装饰品。
Bootstrap 为这个表单提供了一些样式。
src/styles.css
@import url('https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css');
  
<select class="form-control" id="power" required>
<option *ngFor="let pow of powers" [value]="pow">{{pow}}</option>//把pow绑定到value属性中
</select>

<form #heroForm="ngForm">
heroForm 变量是一个到 NgForm 指令的引用，它代表该表单的整体。
当在表单中使用 [(ngModel)] 时，必须要定义 name 属性。
通过 ngModel 跟踪修改状态与有效性验证
NgModel 指令不仅仅跟踪状态。它还使用特定的 Angular CSS 类来更新控件，
以反映当前状态。 可以利用这些 CSS 类来修改控件的外观，显示或隐藏消息。

状态

为真时的 CSS 类
为假时的 CSS 类
控件被访问过。
ng-touched
ng-untouched
控件的值变化了。
ng-dirty
ng-pristine
控件的值有效。
ng-valid
ng-invalid
<input type="text" class="form-control" id="name"
  required
  [(ngModel)]="model.name" name="name"
  #spy>
<br>TODO: remove this: {{spy.className}}

src/index.html (styles)
<link rel="stylesheet" href="assets/forms.css">

.ng-valid[required], .ng-valid.required  {
  border-left: 5px solid #42A948; /* green */
}

.ng-invalid:not(form)  {
  border-left: 5px solid #a94442; /* red */
}

<label for="name">Name</label>
<input type="text" class="form-control" id="name"
       required
       [(ngModel)]="model.name" name="name"
       #name="ngModel">
<div [hidden]="name.valid || name.pristine"
     class="alert alert-danger">
  Name is required
</div>
<button type="button" class="btn btn-default" (click)="newHero(); heroForm.reset()">New Hero</button>

<form (ngSubmit)="onSubmit()" #heroForm="ngForm">

<button type="submit" class="btn btn-success" [disabled]="!heroForm.form.valid">Submit</button>

<div [hidden]="submitted">
  <h1>Hero Form</h1>
  <form (ngSubmit)="onSubmit()" #heroForm="ngForm">

     <!-- ... all of the form ... -->

  </form>
</div>

submitted = false;
onSubmit() { this.submitted = true; }

表单验证

<input id="name" name="name" class="form-control" 
      required minlength="4" appForbiddenName="bob"
      [(ngModel)]="hero.name" #name="ngModel" > //把ngmodel导出到name的模板变量中

<div *ngIf="name.invalid && (name.dirty || name.touched)"
    class="alert alert-danger">

  <div *ngIf="name.errors.required">
    Name is required.
  </div>
  <div *ngIf="name.errors.minlength">
    Name must be at least 4 characters long.
  </div>
  <div *ngIf="name.errors.forbiddenName">
    Name cannot be Bob.
  </div>
</div>

响应式表单

import { ReactiveFormsModule } from '@angular/forms';
src/app/name-editor/name-editor.component.ts
import { Component } from '@angular/core';
import { FormControl } from '@angular/forms';
@Component({
  selector: 'app-name-editor',
  templateUrl: './name-editor.component.html',
  styleUrls: ['./name-editor.component.css']
})
export class NameEditorComponent {
  name = new FormControl('');
}

<label>
  Name:
  <input type="text" [formControl]="name">
</label>

<p>
  Value: {{ name.value }}
</p>

updateName() {
  this.name.setValue('Nancy');
}
修改模板，添加一个按钮，用于模拟改名操作。在点 Update Name 按钮之前表单控件元素中输入
的任何值都会回显为它的当前值。
src/app/name-editor/name-editor.component.html (update value)
<p>
  <button (click)="updateName()">Update Name</button>
</p>

把表单控件分组

import { FormGroup, FormControl } from '@angular/forms';
export class ProfileEditorComponent {
  profileForm = new FormGroup({
    firstName: new FormControl(''),
    lastName: new FormControl(''),
  });
}

<form [formGroup]="profileForm">
  <label>
    First Name:
    <input type="text" formControlName="firstName">
  </label>
  <label>
    Last Name:
    <input type="text" formControlName="lastName">
  </label>
</form>

保存表单数据

<form [formGroup]="profileForm" (ngSubmit)="onSubmit()">

onSubmit() {
  console.warn(this.profileForm.value);
}
<button type="submit" [disabled]="!profileForm.valid">Submit</button>

嵌套的表单组

export class ProfileEditorComponent {
  profileForm = new FormGroup({
    firstName: new FormControl(''),
    lastName: new FormControl(''),
    address: new FormGroup({
      street: new FormControl(''),
      city: new FormControl(''),
      state: new FormControl(''),
      zip: new FormControl('')
    })
  });
  
<div formGroupName="address">
<h3>Address</h3>
<label>
Street:
<input type="text" formControlName="street">
</label>
<label>
City:
<input type="text" formControlName="city">
</label>
<label>
State:
<input type="text" formControlName="state">
</label>
<label>
Zip Code:
<input type="text" formControlName="zip">
</label>
</div>

updateProfile() {
  this.profileForm.patchValue({
    firstName: 'Nancy',
    address: {
      street: '123 Drew Street'
    }
  });
}
通过往模板中添加一个按钮来模拟一次更新操作，以修改用户档案。
src/app/profile-editor/profile-editor.component.html (update value)
<p>
  <button (click)="updateProfile()">Update Profile</button>
</p>

使用 FormBuilder 来生成表单控件

import { FormBuilder } from '@angular/forms';
步骤 2 - 注入 FormBuilder 服务
constructor(private fb: FormBuilder) { }
步骤 3 - 生成表单控件
FormBuilder 服务有三个方法：control()、group() 和 array()。这些方法都是工厂方法，
用于在组件类中分别生成 FormControl、FormGroup 和 FormArray。
把生成 profileForm 的代码改为用 group 方法来创建这些控件。
src/app/profile-editor/profile-editor.component.ts (form builder)

import { Component } from '@angular/core';
import { FormBuilder } from '@angular/forms';
 
@Component({
  selector: 'app-profile-editor',
  templateUrl: './profile-editor.component.html',
  styleUrls: ['./profile-editor.component.css']
})
export class ProfileEditorComponent {
  profileForm = this.fb.group({
    firstName: [''],
    lastName: [''],
    address: this.fb.group({
      street: [''],
      city: [''],
      state: [''],
      zip: ['']
    }),
  });
  constructor(private fb: FormBuilder) { }
}

简单表单验证

步骤 1 - 导入验证器函数
响应式表单包含了一组开箱即用的常用验证器函数。这些函数接收一个控件，
用以验证并根据验证结果返回一个错误对象或空值。

从 @angular/forms 包中导入 Validators 类。
src/app/profile-editor/profile-editor.component.ts (import)
import { Validators } from '@angular/forms';
步骤 2 - 把字段设为必填（required）
最常见的校验项是把一个字段设为必填项。本节描述如何为 firstName 控件添加“必填项”验证器。
在 ProfileEditor 组件中，把静态方法 Validators.required 设置为 firstName 控件值数组中的
第二项。
src/app/profile-editor/profile-editor.component.ts (required validator)
profileForm = this.fb.group({
  firstName: ['', Validators.required],
  lastName: [''],
  address: this.fb.group({
    street: [''],
    city: [''],
    state: [''],
    zip: ['']
  }),
});
HTML5 有一组内置的属性，用来进行原生验证，包括 required、minlength、maxlength 等。
虽然是可选的，不过你也可以在表单的输入元素上把它们添加为附加属性来使用它们。这
里我们把 required 属性添加到 firstName 输入元素上。
src/app/profile-editor/profile-editor.component.html (required attribute)
<input type="text" formControlName="firstName" required>
<p>
  Form Status: {{ profileForm.status }}
</p>

使用表单数组管理动态控件

步骤 1 - 导入 FormArray
从 @angular/form 中导入 FormArray，以使用它的类型信息。FormBuilder 
服务用于创建 FormArray 实例。

src/app/profile-editor/profile-editor.component.ts (import)
import { FormArray } from '@angular/forms';
步骤 2 - 定义 FormArray
你可以通过把一组（从零项到多项）控件定义在一个数组中来初始化一个 FormArray。
为 profileForm 添加一个 aliases 属性，把它定义为 FormArray 类型。

使用 FormBuilder.array() 方法来定义该数组，并用 FormBuilder.control() 
方法来往该数组中添加一个初始控件。

src/app/profile-editor/profile-editor.component.ts (aliases form array)
profileForm = this.fb.group({
  firstName: ['', Validators.required],
  lastName: [''],
  address: this.fb.group({
    street: [''],
    city: [''],
    state: [''],
    zip: ['']
  }),
  aliases: this.fb.array([
    this.fb.control('')
  ])
});

get aliases() {
  return this.profileForm.get('aliases') as FormArray;
}
addAlias() {
  this.aliases.push(this.fb.control(''));
}
<div formArrayName="aliases">
  <h3>Aliases</h3> <button (click)="addAlias()">Add Alias</button>

  <div *ngFor="let address of aliases.controls; let i=index">
    <!-- The repeated alias template -->
    <label>
      Alias:
      <input type="text" [formControlName]="i">
    </label>
  </div>
</div>

表单验证

模板驱动验证
为了往模板驱动表单中添加验证机制，你要添加一些验证属性，就像原生的 HTML 表单验证器。
 Angular 会用指令来匹配这些具有验证功能的指令。

每当表单控件中的值发生变化时，Angular 就会进行验证，并生成一个验证错误的列表
（对应着 INVALID 状态）或者 null（对应着 VALID 状态）。

你可以通过把 ngModel 导出成局部模板变量来查看该控件的状态。 
比如下面这个例子就把 NgModel 导出成了一个名叫 name 的变量：

template/hero-form-template.component.html (name)
<input id="name" name="name" class="form-control" 
      required minlength="4" appForbiddenName="bob"
      [(ngModel)]="hero.name" #name="ngModel" >

<div *ngIf="name.invalid && (name.dirty || name.touched)"
    class="alert alert-danger">
  <div *ngIf="name.errors.required">
    Name is required.
  </div>
  <div *ngIf="name.errors.minlength">
    Name must be at least 4 characters long.
  </div>
  <div *ngIf="name.errors.forbiddenName">
    Name cannot be Bob.
  </div>
</div>

响应式表单验证

ngOnInit(): void {
  this.heroForm = new FormGroup({
    'name': new FormControl(this.hero.name, [
      Validators.required,
      Validators.minLength(4),
      forbiddenNameValidator(/bob/i) //验证器函数，这边要自定义这个函数
    ]),
    'alterEgo': new FormControl(this.hero.alterEgo),
    'power': new FormControl(this.hero.power, Validators.required)
  });
}
get name() { return this.heroForm.get('name'); }
get power() { return this.heroForm.get('power'); }

自定义验证器

由于内置验证器无法适用于所有应用场景，有时候你还是得创建自定义验证器。
考虑前面的例子中的 forbiddenNameValidator 函数。该函数的定义看起来是这样的：
shared/forbidden-name.directive.ts (forbiddenNameValidator)
/** A hero's name can't match the given regular expression */
定义那个函数，是一个指令，返回引用的是返回值
export function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {
  return (control: AbstractControl): {[key: string]: any} | null => {
    const forbidden = nameRe.test(control.value);
    return forbidden ? {'forbiddenName': {value: control.value}} : null;
  };
}
shared/forbidden-name.directive.ts (providers)

添加到模板驱动表单

providers: [{provide: NG_VALIDATORS, useExisting: ForbiddenValidatorDirective, 
multi: true}]


shared/forbidden-name.directive.ts (directive)
@Directive({
  selector: '[appForbiddenName]',
  providers: [{provide: NG_VALIDATORS, useExisting: ForbiddenValidatorDirective, 
  multi: true}]
})
export class ForbiddenValidatorDirective implements Validator {
  @Input('appForbiddenName') forbiddenName: string;
	export function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {
  return (control: AbstractControl): {[key: string]: any} | null => {
    const forbidden = nameRe.test(control.value);
    return forbidden ? {'forbiddenName': {value: control.value}} : null;
  };
}
  validate(control: AbstractControl): {[key: string]: any} | null {
    return this.forbiddenName ? forbiddenNameValidator(new RegExp(this.forbiddenName, 'i'))(control)
                              : null;
  }
}
一旦 ForbiddenValidatorDirective 写好了，你只要把 forbiddenName 
选择器添加到输入框上就可以激活这个验证器了。比如：
template/hero-form-template.component.html (forbidden-name-input)
<input id="name" name="name" class="form-control" 
      required minlength="4" appForbiddenName="bob" //模板驱动表单自定义验证。传入后台
      [(ngModel)]="hero.name" #name="ngModel" >	  
	  
跨字段交叉验证

本节将展示如何进行跨字段验证。这里假设你已经有了创建自定义验证器所需的基础知识。
在下一节中，我们要确保英雄们不能通过填写表单来暴露他们的真实身份。要做到这一点
，我们就要验证英雄的名字和他的第二人格（alterEgo）是否匹配。

添加到响应式表单

表单具有下列结构：
const heroForm = new FormGroup({
  'name': new FormControl(),
  'alterEgo': new FormControl(),
  'power': new FormControl()
});
注意，name 和 alterEgo 是兄弟控件。要想在单个的自定义验证器中计算这两个控件，
我们就得在它们共同的祖先控件（FormGroup）中进行验证。
这样，我们就可以查询 FormGroup 的子控件，从而让我们能够比较它们的值。
要想给 FormGroup 添加验证器，就要在创建时把一个新的验证器传给它的第二个参数。
const heroForm = new FormGroup({
  'name': new FormControl(),
  'alterEgo': new FormControl(),
  'power': new FormControl()
}, { validators: identityRevealedValidator });

验证器的代码如下：
shared/identity-revealed.directive.ts
/** A hero's name can't match the hero's alter ego */
export const identityRevealedValidator: ValidatorFn = (control: FormGroup): ValidationErrors | null => {
  const name = control.get('name');
  const alterEgo = control.get('alterEgo');
  return name && alterEgo && name.value === alterEgo.value ? { 'identityRevealed': true } : null;
};
这个身份验证器实现了 ValidatorFn 接口。
它接收一个 Angular 表单控件对象作为参数，当表单有效时，它返回一个 null，
否则返回 ValidationErrors 对象。
我们先通过调用 FormGroup 的 get 方法来获取子控件。然后，
简单地比较一下 name 和 alterEgo 控件的值。
如果这两个值不一样，那么英雄的身份就应该继续保密，我们可以安全的返回 null。
否则就说明英雄的身份已经暴露了，我们必须通过返回一个错误对象来把这个表单标记为无效的。
接下来，为了提供更好的用户体验，当表单无效时，我们还要显示一个恰当的错误信息。
reactive/hero-form-template.component.html
<div *ngIf="heroForm.errors?.identityRevealed && (heroForm.touched || heroForm.dirty)" 
class="cross-validation-error-message alert alert-danger">
    Name cannot match alter ego.
</div>
注意，我们需要检查：
FormGroup 应该有一个由 identityRevealed 验证器返回的交叉验证错误对象。
用户已经和表单进行过交互。

添加到模板驱动表单中

首先，我们必须创建一个指令，它会包装这个验证器函数。
我们使用 NG_VALIDATORS 令牌来把它作为验证器提供出来。
如果你还不清楚为什么要这么做或者不能完全理解这种语法，请重新访问前面的小节。
shared/identity-revealed.directive.ts
@Directive({
  selector: '[appIdentityRevealed]',
  providers: [{ provide: NG_VALIDATORS, useExisting: IdentityRevealedValidatorDirective, multi: true }]
})
export class IdentityRevealedValidatorDirective implements Validator {
  validate(control: AbstractControl): ValidationErrors {
    return identityRevealedValidator(control)
  }
}
接下来，我们要把该指令添加到 HTML 模板中。由于验证器必须注册在表单的最高层，所以我们要把该指令放在 form 标签上。

template/hero-form-template.component.html
content_copy
<form #heroForm="ngForm" appIdentityRevealed>
为了提供更好的用户体验，当表单无效时，我们要显示一个恰当的错误信息。

template/hero-form-template.component.html
content_copy
<div *ngIf="heroForm.errors?.identityRevealed && (heroForm.touched || heroForm.dirty)" class="cross-validation-error-message alert alert-danger">
    Name cannot match alter ego.
</div>
注意，我们需要检查：

该表单具有一个由 identityRevealed 验证器提供的交叉验证错误对象。
用户已经和表单进行过交互。
这样就完成了这个交叉验证的例子。我们的做法是：
基于两个相邻控件的值来验证表单
当用户与表单交互过并且验证失败时，才显示一个描述性的错误信息。

自定义控件

<form #form="ngForm" (ngSubmit)="submit(form.value)">
  <counter-input name="counter" ngModel></counter-input>
  <button type="submit">Submit</button>
</form>
//导入符号
import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
 
import { CounterComponent } from './couter.component';
import { AppComponent } from './app.component';
 
@NgModule({
  imports: [BrowserModule],
  declarations: [AppComponent, CounterComponent],
  bootstrap: [AppComponent],
  schemas: [CUSTOM_ELEMENTS_SCHEMA]
})
export class AppModule { }
有DefaultValueAccessor照顾文本输入和textareas，SelectControlValueAccessor处理选择输入，
或者CheckboxControlValueAccessor，惊喜，处理复选框，等等。

我们的计数器组件需要ControlValueAccessor知道如何更新counterValue模型
并告知外部世界的变化。一旦我们实现了该接口，它就能够与Angular表单进行通信。
import { Component, OnInit, Input ,forwardRef} from '@angular/core';
import {ControlValueAccessor,NG_VALUE_ACCESSOR} from '@angular/forms';
@Component({
  selector: 'app-counter',
  templateUrl: './counter.component.html',
  styleUrls: ['./counter.component.css'],
  providers: [
    {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => CounterComponent),
        multi: true
    }
  ]
})
export class CounterComponent implements OnInit, ControlValueAccessor {
  countNumber: number = 0;

  constructor() { }

  ngOnInit() {
  }

  onIncrease() {
    this.countNumber++;
    this.propagateChange(this.countNumber);
  }

  onDecrease() {
    this.countNumber--;
    this.propagateChange(this.countNumber);
  }
  propagateChange = (_: any) => {};
   /**将数据从模型传输到视图 */
   writeValue(obj: any): void {
     this.countNumber=obj;
  }

  /**将数据从视图传播到模型 */
  registerOnChange(fn: any): void {
    this.propagateChange=fn;
  }

  registerOnTouched(fn: any): void {
    
  }

  setDisabledState?(isDisabled: boolean): void {

  }


}
import { BrowserModule } from '@angular/platform-browser';
import { NgModule,CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';

import { AppComponent } from './app.component';
import { CounterComponent } from './counter/counter.component';
import { FormsModule } from '@angular/forms';

@NgModule({
  imports: [BrowserModule,FormsModule],
  declarations: [AppComponent, CounterComponent],
  bootstrap: [AppComponent],
  schemas: [CUSTOM_ELEMENTS_SCHEMA]
})
export class AppModule { }
get diagnostic() { return JSON.stringify(this.model); } 在html中直接可以{{diagnostic}}



