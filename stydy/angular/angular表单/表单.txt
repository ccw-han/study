 用户输入
 <input (keyup)="onKey($event)">
  <p>{{values}}</p>
   onKey(event: any) { // without type info
    this.values += event.target.value + ' | ';
  }
 从一个模板引用变量中获得用户输入
  <input #box (keyup)="0">
    <p>{{box.value}}</p>
	<input #box (keyup)="onKey(box.value)">
    <p>{{values}}</p>
	 onKey(value: string) {
    this.values += value + ' | ';
  }
   <input #box (keyup.enter)="onEnter(box.value)">
    <p>{{value}}</p>
	模板驱动表单
	get diagnostic() { return JSON.stringify(this.model); }
}页面直接使用diagnostic变量
@import url('https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css');导入样式库
<option *ngFor="let pow of powers" [value]="pow">{{pow}}</option>
<form #heroForm="ngForm">
heroForm 变量是一个到 NgForm 指令的引用，它代表该表单的整体。
控件被访问过。

ng-touched

ng-untouched

控件的值变化了。

ng-dirty

ng-pristine

控件的值有效。

ng-valid

ng-invalid
<input type="text" class="form-control" id="name"
  required
  [(ngModel)]="model.name" name="name"
  #spy>
<br>TODO: remove this: {{spy.className}}
src/assets/forms.css
指定验证类名
.ng-valid[required], .ng-valid.required  {
  border-left: 5px solid #42A948; /* green */
}

.ng-invalid:not(form)  {
  border-left: 5px solid #a94442; /* red */
}
<label for="name">Name</label>
<input type="text" class="form-control" id="name"
       required
       [(ngModel)]="model.name" name="name"
       #name="ngModel">
<div [hidden]="name.valid || name.pristine"
     class="alert alert-danger">
  Name is required
</div>
<button type="button" class="btn btn-default" (click)="newHero(); heroForm.reset()">New Hero</button>
<form (ngSubmit)="onSubmit()" #heroForm="ngForm">用ngsubmit用于提交表单
<button type="submit" class="btn btn-success" [disabled]="!heroForm.form.valid">Submit</button>
响应式表单
第一步import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
  imports: [
    // other imports ...
    ReactiveFormsModule
  ],
})
export class AppModule { }
import { Component } from '@angular/core';
import { FormControl } from '@angular/forms';

@Component({
  selector: 'app-name-editor',
  templateUrl: './name-editor.component.html',
  styleUrls: ['./name-editor.component.css']
})
export class NameEditorComponent {
  name = new FormControl('');
}
第三步在模板中注册
src/app/name-editor/name-editor.component.html
content_copy
<label>
  Name:
  <input type="text" [formControl]="name">
</label>
控件值怎么样
<p>
  Value: {{ name.value }}
</p>直接访问value属性
替换表单控件的值
updateName() {
  this.name.setValue('Nancy');
}
把表单控件分组
import { Component } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
 
@Component({
  selector: 'app-profile-editor',
  templateUrl: './profile-editor.component.html',
  styleUrls: ['./profile-editor.component.css']
})
export class ProfileEditorComponent {
  profileForm = new FormGroup({
    firstName: new FormControl(''),
    lastName: new FormControl(''),
  });
}
<form [formGroup]="profileForm">
  
  <label>
    First Name:
    <input type="text" formControlName="firstName">
  </label>

  <label>
    Last Name:
    <input type="text" formControlName="lastName">
  </label>

</form>
嵌套的表单组
export class ProfileEditorComponent {
  profileForm = new FormGroup({
    firstName: new FormControl(''),
    lastName: new FormControl(''),
    address: new FormGroup({
      street: new FormControl(''),
      city: new FormControl(''),
      state: new FormControl(''),
      zip: new FormControl('')
    })
  });
}
<div formGroupName="address">
  <h3>Address</h3>

  <label>
    Street:
    <input type="text" formControlName="street">
  </label>

  <label>
    City:
    <input type="text" formControlName="city">
  </label>
  
  <label>
    State:
    <input type="text" formControlName="state">
  </label>

  <label>
    Zip Code:
    <input type="text" formControlName="zip">
  </label>
</div>
部分模型更新
updateProfile() {
  this.profileForm.patchValue({
    firstName: 'Nancy',
    address: {
      street: '123 Drew Street'
    }
  });
}
使用 FormBuilder 来生成表单控件
constructor(private fb: FormBuilder) { }
export class ProfileEditorComponent {
  profileForm = this.fb.group({
    firstName: [''],
    lastName: [''],
    address: this.fb.group({
      street: [''],
      city: [''],
      state: [''],
      zip: ['']
    }),
  });
 
  constructor(private fb: FormBuilder) { }
}
简单表单验证
步骤1导入验证器函数
import { Validators } from '@angular/forms';
profileForm = this.fb.group({
  firstName: ['', Validators.required],
  lastName: [''],
  address: this.fb.group({
    street: [''],
    city: [''],
    state: [''],
    zip: ['']
  }),
});
使用表单数组管理动态控件
第一步导入import { FormArray } from '@angular/forms';
profileForm = this.fb.group({
  firstName: ['', Validators.required],
  lastName: [''],
  address: this.fb.group({
    street: [''],
    city: [''],
    state: [''],
    zip: ['']
  }),
  aliases: this.fb.array([
    this.fb.control('')
  ])
});
步骤3访问 FormArray 控件
get aliases() {
  return this.profileForm.get('aliases') as FormArray;
}
addAlias() {
  this.aliases.push(this.fb.control(''));
}
<div formArrayName="aliases">
  <h3>Aliases</h3> <button (click)="addAlias()">Add Alias</button>

  <div *ngFor="let address of aliases.controls; let i=index">
    <!-- The repeated alias template -->
    <label>
      Alias:
      <input type="text" [formControlName]="i">
    </label>
  </div>
</div>
表单验证
响应式表单验证
ngOnInit(): void {
  this.heroForm = new FormGroup({
    'name': new FormControl(this.hero.name, [
      Validators.required,
      Validators.minLength(4),
      
	  - Here's how you pass in the custom validator.
    ]),
    'alterEgo': new FormControl(this.hero.alterEgo),
    'power': new FormControl(this.hero.power, Validators.required)
  });

}

get name() { return this.heroForm.get('name'); }

get power() { return this.heroForm.get('power'); }
<div *ngIf="name.errors.minlength">验证是否显示块
自定义验证器
shared/forbidden-name.directive.ts (forbiddenNameValidator)
/** A hero's name can't match the given regular expression */
export function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {
  return (control: AbstractControl): {[key: string]: any} | null => {
    const forbidden = nameRe.test(control.value);
    return forbidden ? {'forbiddenName': {value: control.value}} : null;
  };
}
模板驱动自定义过程
shared/forbidden-name.directive.ts (providers)
providers: [{provide: NG_VALIDATORS, useExisting: ForbiddenValidatorDirective, multi: true}]
shared/forbidden-name.directive.ts (directive)
@Directive({
  selector: '[appForbiddenName]',
  providers: [{provide: NG_VALIDATORS, useExisting: ForbiddenValidatorDirective, multi: true}]
})
export class ForbiddenValidatorDirective implements Validator {
  @Input('appForbiddenName') forbiddenName: string;
 
  validate(control: AbstractControl): {[key: string]: any} | null {
    return this.forbiddenName ? forbiddenNameValidator(new RegExp(this.forbiddenName, 'i'))(control)
                              : null;
  }
}
<input id="name" name="name" class="form-control" 
      required minlength="4" appForbiddenName="bob"
      [(ngModel)]="hero.name" #name="ngModel" >
	  表示控件状态的 CSS 类
	  注意，name 和 alterEgo 是兄弟控件。要想在单个的自定义验证器中计算这两个控件，我们就得在它们共同的祖先控件（FormGroup）中进行验证。这样，我们就可以查询 FormGroup 的子控件，从而让我们能够比较它们的值。

要想给 FormGroup 添加验证器，就要在创建时把一个新的验证器传给它的第二个参数。

const heroForm = new FormGroup({
  'name': new FormControl(),
  'alterEgo': new FormControl(),
  'power': new FormControl()
}, { validators: identityRevealedValidator });
验证器的代码如下：

shared/identity-revealed.directive.ts

/** A hero's name can't match the hero's alter ego */
export const identityRevealedValidator: ValidatorFn = (control: FormGroup): ValidationErrors | null => {
  const name = control.get('name');
  const alterEgo = control.get('alterEgo');

  return name && alterEgo && name.value === alterEgo.value ? { 'identityRevealed': true } : null;
};
<div *ngIf="heroForm.errors?.identityRevealed && (heroForm.touched || heroForm.dirty)" class="cross-validation-error-message alert alert-danger">
    Name cannot match alter ego.
</div>
自定义控件

<form #form="ngForm" (ngSubmit)="submit(form.value)">
  <counter-input name="counter" ngModel></counter-input>
  <button type="submit">Submit</button>
</form>
//导入符号
import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
 
import { CounterComponent } from './couter.component';
import { AppComponent } from './app.component';
 
@NgModule({
  imports: [BrowserModule],
  declarations: [AppComponent, CounterComponent],
  bootstrap: [AppComponent],
  schemas: [CUSTOM_ELEMENTS_SCHEMA]
})
export class AppModule { }
有DefaultValueAccessor照顾文本输入和textareas，SelectControlValueAccessor处理选择输入，
或者CheckboxControlValueAccessor，惊喜，处理复选框，等等。

我们的计数器组件需要ControlValueAccessor知道如何更新counterValue模型
并告知外部世界的变化。一旦我们实现了该接口，它就能够与Angular表单进行通信。
import { Component, OnInit, Input ,forwardRef} from '@angular/core';
import {ControlValueAccessor,NG_VALUE_ACCESSOR} from '@angular/forms';
@Component({
  selector: 'app-counter',
  templateUrl: './counter.component.html',
  styleUrls: ['./counter.component.css'],
  providers: [
    {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => CounterComponent),
        multi: true
    }
  ]
})
export class CounterComponent implements OnInit, ControlValueAccessor {
  countNumber: number = 0;

  constructor() { }

  ngOnInit() {
  }

  onIncrease() {
    this.countNumber++;
    this.propagateChange(this.countNumber);
  }

  onDecrease() {
    this.countNumber--;
    this.propagateChange(this.countNumber);
  }
  propagateChange = (_: any) => {};
   /**将数据从模型传输到视图 */
   writeValue(obj: any): void {
     this.countNumber=obj;
  }

  /**将数据从视图传播到模型 */
  registerOnChange(fn: any): void {
    this.propagateChange=fn;
  }

  registerOnTouched(fn: any): void {
    
  }

  setDisabledState?(isDisabled: boolean): void {

  }


}
import { BrowserModule } from '@angular/platform-browser';
import { NgModule,CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';

import { AppComponent } from './app.component';
import { CounterComponent } from './counter/counter.component';
import { FormsModule } from '@angular/forms';

@NgModule({
  imports: [BrowserModule,FormsModule],
  declarations: [AppComponent, CounterComponent],
  bootstrap: [AppComponent],
  schemas: [CUSTOM_ELEMENTS_SCHEMA]
})
export class AppModule { }
get diagnostic() { return JSON.stringify(this.model); } 在html中直接可以{{diagnostic}}
