localStorage和sessionStorage操作
localStorage和sessionStorage都具有相同的操作方法，例如setItem、getItem和removeItem等

localStorage和sessionStorage的方法
setItem存储value
用途：将value存储到key字段

sessionStorage.setItem("key", "value");     localStorage.setItem("site", "js8.in");
getItem获取value
用途：获取指定key本地存储的值

var value = sessionStorage.getItem("key");     var site = localStorage.getItem("site");
removeItem删除key
用途：删除指定key本地存储的值

sessionStorage.removeItem("key");     localStorage.removeItem("site");
clear清除所有的key/value
用途：清除所有的key/value

sessionStorage.clear();     localStorage.clear();
其他操作方法：点操作和[ ]
web Storage不但可以用自身的setItem,getItem等方便存取，也可以像普通对象一样用点(.)操作符，及[]的方式进行数据存储，像如下的代码：

var storage = window.localStorage; storage.key1 = "hello"; storage["key2"] = "world"; console.log(storage.key1); console.log(storage["key2"]);
localStorage和sessionStorage的key和length属性实现遍历
sessionStorage和localStorage提供的key()和length可以方便的实现存储的数据遍历，例如下面的代码：

复制代码
var storage = window.localStorage;
for(var i=0, len=storage.length; i<len;i++){
    var key = storage.key(i);     
    var value = storage.getItem(key);     
    console.log(key + "=" + value); 
}
三者的异同
特性	Cookie	localStorage	sessionStorage
数据的生命期	一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效	除非被清除，否则永久保存	仅在当前会话下有效，关闭页面或浏览器后被清除
存放数据大小	4K左右	一般为5MB
与服务器端通信	每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题	仅在客户端（即浏览器）中保存，不参与和服务器的通信
易用性	需要程序员自己封装，源生的Cookie接口不友好	源生接口可以接受，亦可再次封装来对Object和Array有更好的支持


2.1 属性
属性 readonly int sessionStorage.length ：返回一个整数，表示存储在 sessionStorage 对象中的数据项(键值对)数量。

 

2.2 方法
方法 string sessionStorage.key(int index) ：返回当前 sessionStorage 对象的第index序号的key名称。若没有返回null。

方法 string sessionStorage.getItem(string key) ：返回键名(key)对应的值(value)。若没有返回null。

方法 void sessionStorage.setItem(string key, string value) ：该方法接受一个键名(key)和值(value)作为参数，将键值对添加到存储中；如果键名存在，则更新其对应的值。

方法 void sessionStorage.removeItem(string key) ：将指定的键名(key)从 sessionStorage 对象中移除。

方法 void sessionStorage.clear() ：清除 sessionStorage 对象所有的项。

 

3. 示例
3.1 存储数据
3.1.1 采用setItem()方法存储
1
sessionStorage.setItem('testKey','这是一个测试的value值'); // 存入一个值
3.1.2 通过属性方式存储　　
1
sessionStorage['testKey'] = '这是一个测试的value值';
　
3.2 读取数据
3.2.1 通过getItem()方法取值
1
sessionStorage.getItem('testKey'); // => 返回testKey对应的值
3.2.2 通过属性方式取值
1
sessionStorage['testKey']; // => 这是一个测试的value值

3.3 存储Json对象
sessionStorage也可存储Json对象：存储时，通过JSON.stringify()将对象转换为文本格式；读取时，通过JSON.parse()将文本转换回对象。

var userEntity = {
    name: 'tom',
    age: 22
};
 
// 存储值：将对象转换为Json字符串
sessionStorage.setItem('user', JSON.stringify(userEntity));
 
// 取值时：把获取到的Json字符串转换回对象
var userJsonStr = sessionStorage.getItem('user');
userEntity = JSON.parse(userJsonStr);
console.log(userEntity.name); // => tom